from fileinput import input
from itertools import accumulate, chain, count, takewhile, starmap
from functools import partial
from more_itertools import take, side_effect
import operator as op
import math

class backdict(dict):
    def __missing__(self, k):
        return self[k - 1]

class Stop:
    def __eq__(self, other):
        return type(other) is Stop
    def __add__(self, other):
        return self
    def __mul__(self, other):
        return self
    def __show__(self):
        return 'Stop'

# d = backdict({0: 0, 3: 1, 6: 2, 9: 3})
# print(d[4])

# print(list(take(3, (
#     (k, d[k])
#     for k in count(1, 1)
#     for d in [backdict(accumulate(
#         chain(
#             [(1, 1)],
#             # zip([1, 1, 1, 1], [1, 2, 3, 4]),
#             # side_effect(print, map(
#             #     lambda x: next(
#             #         (2, int(x[1])) if x[0] == 'addx' else (1, 0)
#             #         for x in [x.strip().split()]
#             #     ),
#             #     list(input())
#             # )),
#             map(
#                 lambda x: next(
#                     (int(x[0]), int(x[1]))
#                     for x in [x.strip().split()]
#                 ),
#                 side_effect(print, list(input()))
#             ),
#             [(1, Stop())]
#         ),
#         lambda s, x: (x[0] + s[0], x[1] + s[1])
#     ))]
# ))))

# print(list(take(300, (
#     (k, d[k])
#     for k in count(1, 1)
#     for d in [backdict(accumulate(
#         chain(
#             [(1, 1)],
#             # zip([1, 1, 1, 1], [1, 2, 3, 4]),
#             map(lambda x: x, [(2, 15), (2, -11), (2, 6), (2, -3), (2, 5), (2, -1), (2, -8), (2, 13), (2, 4), (1, 0), (2, -1), (2, 5),
#             (2, -1), (2, 5), (2, -1), (2, 5), (2, -1), (2, 5), (2, -1), (2, -35), (2, 1), (2, 24), (2, -19), (2, 1),
#             (2, 16), (2, -11), (1, 0), (1, 0), (2, 21), (2, -15), (1, 0), (1, 0), (2, -3), (2, 9), (2, 1), (2, -3),
#             (2, 8), (2, 1), (2, 5), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (2, -36), (1, 0), (2, 1), (2, 7), (1, 0),
#             (1, 0), (1, 0), (2, 2), (2, 6), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (2, 1), (1, 0), (1, 0), (2, 7),
#             (2, 1), (1, 0), (2, -13), (2, 13), (2, 7), (1, 0), (2, 1), (2, -33), (1, 0), (1, 0), (1, 0), (2, 2), (1, 0),
#             (1, 0), (1, 0), (2, 8), (1, 0), (2, -1), (2, 2), (2, 1), (1, 0), (2, 17), (2, -9), (2, 1), (2, 1), (2, -3),
#             (2, 11), (1, 0), (1, 0), (2, 1), (1, 0), (2, 1), (1, 0), (1, 0), (2, -13), (2, -19), (2, 1), (2, 3), (2, 26),
#             (2, -30), (2, 12), (2, -1), (2, 3), (2, 1), (1, 0), (1, 0), (1, 0), (2, -9), (2, 18), (2, 1), (2, 2), (1, 0),
#             (1, 0), (2, 9), (1, 0), (1, 0), (1, 0), (2, -1), (2, 2), (2, -37), (2, 1), (2, 3), (1, 0), (2, 15), (2, -21),
#             (2, 22), (2, -6), (2, 1), (1, 0), (2, 2), (2, 1), (1, 0), (2, -10), (1, 0), (1, 0), (2, 20), (2, 1), (2, 2),
#             (2, 2), (2, -6), (2, -11), (1, 0), (1, 0), (1, 0)]),
#             # side_effect(print, map(
#             #     lambda x: next(
#             #         (2, int(x[1])) if x[0] == 'addx' else (1, 0)
#             #         for x in [x.strip().split()]
#             #     ),
#             #     list(input())
#             # )),
#             [(1, Stop())]
#         ),
#         lambda s, x: (x[0] + s[0], x[1] + s[1])
#     ))]
# ))))

inp = map(
    lambda x: next(
        (2, int(x[1])) if x[0] == 'addx' else (1, 0)
        for x in [x.strip().split()]
    ),
    list(input())
)

# inp = map(lambda x: x,
# [(2, 15), (2, -11), (2, 6), (2, -3), (2, 5), (2, -1), (2, -8), (2, 13), (2, 4), (1, 0), (2, -1), (2, 5),
# (2, -1), (2, 5), (2, -1), (2, 5), (2, -1), (2, 5), (2, -1), (2, -35), (2, 1), (2, 24), (2, -19), (2, 1),
# (2, 16), (2, -11), (1, 0), (1, 0), (2, 21), (2, -15), (1, 0), (1, 0), (2, -3), (2, 9), (2, 1), (2, -3),
# (2, 8), (2, 1), (2, 5), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (2, -36), (1, 0), (2, 1), (2, 7), (1, 0),
# (1, 0), (1, 0), (2, 2), (2, 6), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (2, 1), (1, 0), (1, 0), (2, 7),
# (2, 1), (1, 0), (2, -13), (2, 13), (2, 7), (1, 0), (2, 1), (2, -33), (1, 0), (1, 0), (1, 0), (2, 2), (1, 0),
# (1, 0), (1, 0), (2, 8), (1, 0), (2, -1), (2, 2), (2, 1), (1, 0), (2, 17), (2, -9), (2, 1), (2, 1), (2, -3),
# (2, 11), (1, 0), (1, 0), (2, 1), (1, 0), (2, 1), (1, 0), (1, 0), (2, -13), (2, -19), (2, 1), (2, 3), (2, 26),
# (2, -30), (2, 12), (2, -1), (2, 3), (2, 1), (1, 0), (1, 0), (1, 0), (2, -9), (2, 18), (2, 1), (2, 2), (1, 0),
# (1, 0), (2, 9), (1, 0), (1, 0), (1, 0), (2, -1), (2, 2), (2, -37), (2, 1), (2, 3), (1, 0), (2, 15), (2, -21),
# (2, 22), (2, -6), (2, 1), (1, 0), (2, 2), (2, 1), (1, 0), (2, -10), (1, 0), (1, 0), (2, 20), (2, 1), (2, 2),
# (2, 2), (2, -6), (2, -11), (1, 0), (1, 0), (1, 0)])

# inp = [(2, 15), (2, -11), (2, 6), (2, -3), (2, 5), (2, -1), (2, -8), (2, 13), (2, 4), (1, 0), (2, -1), (2, 5),
# (2, -1), (2, 5), (2, -1), (2, 5), (2, -1), (2, 5), (2, -1), (2, -35), (2, 1), (2, 24), (2, -19), (2, 1),
# (2, 16), (2, -11), (1, 0), (1, 0), (2, 21), (2, -15), (1, 0), (1, 0), (2, -3), (2, 9), (2, 1), (2, -3),
# (2, 8), (2, 1), (2, 5), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (2, -36), (1, 0), (2, 1), (2, 7), (1, 0),
# (1, 0), (1, 0), (2, 2), (2, 6), (1, 0), (1, 0), (1, 0), (1, 0), (1, 0), (2, 1), (1, 0), (1, 0), (2, 7),
# (2, 1), (1, 0), (2, -13), (2, 13), (2, 7), (1, 0), (2, 1), (2, -33), (1, 0), (1, 0), (1, 0), (2, 2), (1, 0),
# (1, 0), (1, 0), (2, 8), (1, 0), (2, -1), (2, 2), (2, 1), (1, 0), (2, 17), (2, -9), (2, 1), (2, 1), (2, -3),
# (2, 11), (1, 0), (1, 0), (2, 1), (1, 0), (2, 1), (1, 0), (1, 0), (2, -13), (2, -19), (2, 1), (2, 3), (2, 26),
# (2, -30), (2, 12), (2, -1), (2, 3), (2, 1), (1, 0), (1, 0), (1, 0), (2, -9), (2, 18), (2, 1), (2, 2), (1, 0),
# (1, 0), (2, 9), (1, 0), (1, 0), (1, 0), (2, -1), (2, 2), (2, -37), (2, 1), (2, 3), (1, 0), (2, 15), (2, -21),
# (2, 22), (2, -6), (2, 1), (1, 0), (2, 2), (2, 1), (1, 0), (2, -10), (1, 0), (1, 0), (2, 20), (2, 1), (2, 2),
# (2, 2), (2, -6), (2, -11), (1, 0), (1, 0), (1, 0)]

# inp = map(lambda x: x, [(2, 15), (2, -11)])
# inp = [(2, 15), (2, -11)]

# print(list(inp))

# print(list(accumulate(
#     chain(
#         [(1, 1)],
#         map((lambda x: (x[0], x[1])), inp),
#         [(1, Stop())]
#     ),
#     lambda s, x: x + s
# )))

print(sum(
    takewhile(partial(op.ne, Stop()), (
        d[k] * k
        for d in [backdict(accumulate(
            chain([(1, 1)], inp, [(1, Stop())]),
            lambda s, x: list(map(op.add, x, s))
        ))]
        for k in count(20, 40)
    ))
))

# print(list(map(op.add, (1, 2, 3), (2, 3, 1))))